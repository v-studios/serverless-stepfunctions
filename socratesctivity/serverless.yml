service: socrates2

plugins:
  - serverless-step-functions
  - serverless-pseudo-parameters

# TODO: I can't get the bucket_name variable refs working right, hard code them for now, sorry.

custom:
  bucket_name: ${self:service}-${self:provider.stage}-${env:USER}        # bucket name is based on $USER

provider:
  name: aws
  runtime: python3.6
  stage: dev
  #region: ap-southeast-1        # hong
  region: us-east-1             # chris
  environment:
    ACTIVITY_ARN: "arn:aws:states:#{AWS::Region}:#{AWS::AccountId}:activity:WaitForUpload"
    #  Fn::GetAtt: [WaitForUploadStepFunctionsActivity, Arn]
    #BUCKET_NAME: ${self:custom.bucket_name}
    BUCKET_NAME: ${self:service}-${self:provider.stage}-${env:USER}
    STATEMACHINE_ARN:
      Fn::GetAtt: [SocratesStepFunctionsStateMachine, Arn]
  iamRoleStatements:
    - Effect: Allow
      Action:
      - states:GetActivityTask
      - states:SendTaskSuccess
      - states:SendTaskFailure
      - states:SendTaskHeartbeat
      Resource: "arn:aws:states:#{AWS::Region}:#{AWS::AccountId}:activity:WaitForUpload"
      #  Fn::GetAtt: [WaitForUploadStepFunctionsActivity, Arn]

functions:
  StartJob:
    description: Start SM, return presigned upload URL to upload requested file
    handler: handler.start_job
    events:
    - http:
        path: startjob
        method: GET
        cors: true
  SplitPdf:
    description: Split uploaded PDF file
    handler: handler.split_pdf
    events:
     - s3:
         description: PDF multipage document created in doc_pdf/
         bucket: ${self:service}-${self:provider.stage}-${env:USER}   # TODO use the custom or environment var
         #bucket: ${self:custom:bucket_name}
         #bucket: ${self:environment:BUCKET_NAME}
         event: s3:ObjectCreated:*
         # TODO: restrict to /doc_pdfs/*.pdf pattern

stepFunctions:
  stateMachines:
    Socrates:
      definition:
        StartAt: StartJob
        States:
          StartJob:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-StartJobf"
            #Fn::GetAtt: [StartJobLambdaFunction, Arn]
            Next: WaitForUpload
          WaitForUpload:
            # TODO: How do we Fail if we time out waiting for upload?
            # TODO: How do we timeout after 24 hours?
            Type: Task
            # Should this be a Wait + Seconds then a task?
            TimeoutSeconds: 86400      # 24 hours (default=99999999)
            Resource:  "arn:aws:states:#{AWS::Region}:#{AWS::AccountId}:activity:WaitForUpload"
            #           arn:aws:states:us-east-1:304932368623:activity:WaitForUpload
            #Fn::GetAtt: [WaitForUploadStepFunctionsActivity, Arn]
            Next: SplitPdf
          SplitPdf:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-SplitPdf"
            #Fn::GetAtt: [SplitPdfLambdaFunction, Arn]
            Next: DeclareVictory
          DeclareVictory:
            Type: Pass
            End: true
          # Fail:
          #   Type: Fail
  activities:
    # To reference ActivityName, use Fn::GetAtt [ActivityNameStepFunctionsActivity, Arn]
    - WaitForUpload
