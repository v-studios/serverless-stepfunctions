service: chriscallback

plugins:
  - serverless-pseudo-parameters
  - serverless-step-functions

provider:
  name: aws
  runtime: python3.7
  stage: dev
  region: us-east-1
  logRetentionInDays: 14
  iamRoleStatements:
    # Allow the lamba(s) to trigger the statemachine.
    # This seems to be applying to Lambda but not some STS thing?
    # (AccessDeniedException) when calling the SendTaskSuccess operation: User: 
    # arn:aws:sts::304932368623:assumed-role/chriscallback-dev-us-east-1-lambdaRole/chriscallback-dev-StartTaskAndWaitForCallback
    # is not authorized to perform: states:SendTaskSuccess
    # on resource: arn:aws:states:us-east-1:304932368623:stateMachine:ChrisCallbackStepFunctionsStateMachine-Esf4lC8jq7c9",
    - Effect: Allow
      Action:
      - states:SendTaskFailure
      - states:SendTaskSuccess
      #- states:GetActivityTask
      #- states:SendTaskHeartbeat # what is this for?
      Resource: 
      - "arn:aws:states:#{AWS::Region}:#{AWS::AccountId}:states:SendTaskSuccess"
      - Ref: ChrisCallbackStepFunctionsStateMachine



stepFunctions:
  stateMachines:
    ChrisCallback:
      events:
        - http:
            path: start
            method: GET
      definition:
        StartAt: StartTaskAndWaitForCallback
        States:
          StartTaskAndWaitForCallback:
            # Do something like sleep for 4 secs, issue a success or failure code
            # NOTE: no Next here to get to Success so the Lambda must be running.
            Type: Task
            Resource: arn:aws:states:::lambda:invoke.waitForTaskToken
            Parameters:
              FunctionName: ${self:service}-${opt:stage}-StartTaskAndWaitForCallback
              Payload:
                yo: Mama
                taskToken.$: $$.Task.Token
            Next: NotifySuccess
            Catch:
            # Put our named failures before generic TaskFailed
            - ErrorEquals: ["UnluckyError"]
              Next: NotifyUnlucky
            - ErrorEquals: ["SadPath"]
              Next: NotifySadPath
            - ErrorEquals: ["States.TaskFailed"]
              Next: NotifyTaskFailed
          NotifySuccess:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-NotifySuccess"
            End: true
          NotifyUnlucky:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-NotifyUnlucky"
            End: true           # treated as success, but could Next to a Fail state
          NotifySadPath:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-NotifySadPath"
            End: true           # treated as success, but could Next to a Fail state
          NotifyTaskFailed:
            # Cause and Error are optional
            Type: Fail
            Error: You have an unhandled error in your code
            Cause: check the input to this state for the traceback

functions:
  StartTaskAndWaitForCallback:
    handler: handler.start_task_and_wait_for_callback
  NotifySuccess:
    handler: handler.notify_success
  NotifyUnlucky:
    handler: handler.notify_unlucky
  NotifySadPath:
    handler: handler.notify_sad_path
