service: stepFunctionsTest

plugins:
  - serverless-step-functions
  - serverless-pseudo-parameters

provider:
  name: aws
  runtime: python3.6
  environment:
    ACTIVITY_ARN: { "Fn::Join" : [":", ["arn:aws:states:${self:provider.region}", { "Ref" : "AWS::AccountId" }, "activity:hongActivity" ] ]  }
  iamRoleStatements:
    - Effect: Allow
      Action:
        - states:GetActivityTask
        - states:SendTaskSuccess
        - states:SendTaskFailure
        - states:SendTaskHeartbeat
      Resource: { "Fn::Join" : [":", ["arn:aws:states:${self:provider.region}", { "Ref" : "AWS::AccountId" }, "activity:hongActivity" ] ]  }


# you can overwrite defaults here
  stage: dev
  region: ap-southeast-1

functions:
  OpenCase:
    handler: handler.open
  AssignCase:
    handler: handler.assign
  WorkOnCase:
    handler: handler.work
  CloseCase:
    handler: handler.close
  EscalateCase:
    handler: handler.escalate
  MyWorker:
    handler: worker.my_worker
    events:
     - s3:
         description: PDF multipage document created in doc_pdf/
         bucket: doc-pdfs
         event: s3:ObjectCreated:*

  get_upload_url:
    handler: doc_get_upload_url.api_http_get
    events:
    - http:
        path: get_upload_url
        method: GET
        cors: true


stepFunctions:
  stateMachines:
    stepfunc1:
      events:
        - http:
            path: opencase
            method: POST
            cors: true
      definition:
        Comment: "Simple example to understand step functions"
        StartAt: OpenCase
        States:
          OpenCase:
            Type: Task
            # Resource: { "Fn::Join" : [":", ["arn:aws:lambda:${self:provider.region}", { "Ref" : "AWS::AccountId" }, "function:${self:service}-dev-open_case" ] ]  }
            Resource: 
              Fn::GetAtt: [OpenCaseLambdaFunction, Arn]
            Next: WaitCase
          WaitCase:
            Type: Parallel
            Next: ActivityWaitCase
            Branches:
            - StartAt: Wait 20s
              States:
                Wait 20s:
                  Type: Wait
                  Seconds: 20
                  End: true
            - StartAt: Pass
              States:
                Pass:
                  Type: Pass
                  Next: Wait 10s
                Wait 10s:
                  Type: Wait
                  Seconds: 10
                  End: true
          ActivityWaitCase:
            Type: Task
            Resource: { "Fn::Join" : [":", ["arn:aws:states:${self:provider.region}", { "Ref" : "AWS::AccountId" }, "activity:hongActivity" ] ]  }
            TimeoutSeconds: 300
            HeartbeatSeconds: 60
            Next: AssignCase
          AssignCase:
            Type: Task
            # Resource: { "Fn::Join" : [":", ["arn:aws:lambda:${self:provider.region}", { "Ref" : "AWS::AccountId" }, "function:${self:service}-dev-assign_case" ] ]  }
            Resource: 
              Fn::GetAtt: [AssignCaseLambdaFunction, Arn]
            Next: WorkOnCase
          WorkOnCase:
            Type: Task
            # Resource: { "Fn::Join" : [":", ["arn:aws:lambda:${self:provider.region}", { "Ref" : "AWS::AccountId" }, "function:${self:service}-dev-work_on_case" ] ]  }
            Resource: 
              Fn::GetAtt: [WorkOnCaseLambdaFunction, Arn]
            Next: IsCaseResolved
          IsCaseResolved:
            Type: Choice
            Choices:
            - Variable: "$.status"
              NumericEquals: 1
              Next: CloseCase
            - Variable: "$.status"
              NumericEquals: 0
              Next: EscalateCase
          EscalateCase:
            Type: Task
            # Resource: { "Fn::Join" : [":", ["arn:aws:lambda:${self:provider.region}", { "Ref" : "AWS::AccountId" }, "function:${self:service}-dev-escalate_case" ] ]  }
            Resource: 
              Fn::GetAtt: [EscalateCaseLambdaFunction, Arn]
            Next: Fail
          CloseCase:
            Type: Task
            # Resource: { "Fn::Join" : [":", ["arn:aws:lambda:${self:provider.region}", { "Ref" : "AWS::AccountId" }, "function:${self:service}-dev-close_case" ] ]  }
            Resource: 
              Fn::GetAtt: [CloseCaseLambdaFunction, Arn]
            End: true
          Fail:
            Type: Fail
            Cause: "No Matches!"
  activities:
    - hongActivity
