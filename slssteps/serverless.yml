service: slssteps

frameworkVersion: ">=1.45.1 <2.0.0"

provider:
  name: aws
  runtime: python3.7
  logRetentionInDays: 14
  tags:
    techie: chris@v-studios.com
  description: Recreate AWS sample Step Function with Serverless and plugins and Python

plugins:
  - serverless-step-functions
  - serverless-pseudo-parameters

stepFunctions:
  stateMachines:
    CallCenter:                 # SLS appends StepFunctionsStateMachine to logical name
      events:                   # invokes StartAt function, e.g. with curl and input_case_id JSON
        - http:
            path: opencase
            method: post
      definition:
        Comment: "AWS Step Functions state machine that automates call center support session."
        StartAt: Open Case
        States:
          "Open Case":
            Type: Task
            Resource:
              Fn::GetAtt: [OpenCaseLambdaFunction, Arn]
            Next: Assign Case
          "Assign Case":
            Type: Task
            Resource:
              Fn::GetAtt: [AssignCaseLambdaFunction, Arn]
            Next: Work On Case
          "Work On Case":
            Type: Task
            Resource:
              Fn::GetAtt: [WorkOnCaseLambdaFunction, Arn]
            Next: Is Case Resolved
          "Is Case Resolved":
            Type: Choice
            Choices: 
            - Variable: "$.Status"
              NumericEquals: 1
              Next: Close Case
            - Variable: "$.Status"
              NumericEquals: 0
              Next: Escalate Case
            # Default: DefaultState
          "Close Case":
            Type: Task
            Resource:
              Fn::GetAtt: [CloseCaseLambdaFunction, Arn]
            End: true
          "Escalate Case":
            Type: Task
            Resource:
              Fn::GetAtt: [EscalateCaseLambdaFunction, Arn]
            Next: Fail
          "Fail":
            Type: Fail
            Cause: Engage Tier 2 Support
    
# TODO ignore ~ files in packaging
functions:
  OpenCase:
    handler: opencase.handler
  AssignCase:
    handler: assigncase.handler
  WorkOnCase:
    handler: workoncase.handler
  EscalateCase:
    handler: escalatecase.handler
  CloseCase:
    handler: closecase.handler



#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  individually: true  
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
