service: slssteps

frameworkVersion: ">=1.45.1 <2.0.0"

provider:
  name: aws
  runtime: python3.7
  logRetentionInDays: 14
  tags:
    techie: chris@v-studios.com
  description: Recreate AWS sample Step Function with Serverless and plugins and Python

plugins:
  - serverless-step-functions
  - serverless-pseudo-parameters

stepFunctions:
  stateMachines:

    CallCenter:                 # SLS appends StepFunctionsStateMachine to logical name
      events:                   # invokes StartAt function, e.g. with curl and input_case_id JSON
        - http:
            path: opencase
            method: post
      definition:
        Comment: "AWS Step Functions state machine that automates call center support session."
        StartAt: Open Case
        States:
          "Open Case":
            Type: Task
            Resource:
              Fn::GetAtt: [OpenCaseLambdaFunction, Arn]
            Next: Assign Case
          "Assign Case":
            Type: Task
            Resource:
              Fn::GetAtt: [AssignCaseLambdaFunction, Arn]
            Next: Work On Case
          "Work On Case":
            Type: Task
            Resource:
              Fn::GetAtt: [WorkOnCaseLambdaFunction, Arn]
            Next: Is Case Resolved
          "Is Case Resolved":
            Type: Choice
            Choices: 
            - Variable: "$.Case"
              StringEquals: WAIT
              Next: Wait A Day For Upload
            - Variable: "$.Status"
              NumericEquals: 1
              Next: Close Case
            - Variable: "$.Status"
              NumericEquals: 0
              Next: Escalate Case
            # Default: DefaultState
          "Wait A Day For Upload":
            Type: Wait
            Seconds: 86400
            Comment: Simulate waiting for upload and how would we trigger OK exit
            Next: Escalate Case
          "Close Case":
            Type: Task
            Resource:
              Fn::GetAtt: [CloseCaseLambdaFunction, Arn]
            End: True
          "Escalate Case":
            Type: Task
            Resource:
              Fn::GetAtt: [EscalateCaseLambdaFunction, Arn]
            Next: Fail
          "Fail":
            Type: Fail
            Cause: Engage Tier 2 Support
            Error: Got the wrong random number Work On Case
    
    TriggerApproval:
      definition:
        StartAt: LambdaCallback
        TimeoutSeconds: 3600
        States: 
          LambdaCallback:
            Type: Task
            Next: ManualApprovalChoiceState
            Resource: arn:aws:states:::lambda:invoke.waitForTaskToken
            Parameters:
              FunctionName: arn:aws:lambda:us-east-1:304932368623:function:human-approval-LambdaHumanApprovalSendEmailFunctio-1FV6WAXE1X6YM
              Payload:
                ExecutionContext.$: "$$"
                APIGatewayEndpoint: https://0ily9p43e1.execute-api.us-east-1.amazonaws.com/states
          ManualApprovalChoiceState:
            Type: Choice
            Choices:
              - Variable: "$.Status"
                StringEquals: Approved! Task approved by CHRIS@V-STUDIOS.COM
                Next: ApprovedPassState
              - Variable: "$.Status"
                StringEquals: Rejected! Task rejected by CHRIS@V-STUDIOS.COM
                Next: RejectedPassState
          ApprovedPassState:
            Type: Pass
            End: true
          RejectedPassState:
            Type: Pass
            End: true

# TODO ignore ~ files in packaging
functions:
  OpenCase:
    handler: opencase.handler
  AssignCase:
    handler: assigncase.handler
  WorkOnCase:
    handler: workoncase.handler
  EscalateCase:
    handler: escalatecase.handler
  CloseCase:
    handler: closecase.handler



#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  individually: true  
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
