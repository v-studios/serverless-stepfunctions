# 1. User requests upload URL from Lambda API, gets URL including a JobID
# 2. User PUTs to URL on S3
# 3. S3 event triggers a Lambda which starts the statemachine
# 4. Statemachine:
# 4.1. adds info to DB
# 4.2. splits pages and updates DB
# 4.3. declare victory
# Later each PDF page on S3 triggers lambdas which convert, OCR, and update DB, and checks DB for completion
# When complete, advances workflow to some next state, like sending to search, alerting user; for now, mark it Done

service: chris-socrates-sm

plugins:
  - serverless-step-functions
  - serverless-pseudo-parameters

# TODO: I can't get the bucket_name variable refs working right, hard code them for now, sorry.

custom:
  bucket_name: ${self:service}-${self:provider.stage}-${env:USER}        # bucket name is based on $USER

provider:
  name: aws
  runtime: python3.7            # as of 2019-07-18 python 3.7 is the latest
  stage: dev
  #region: ap-southeast-1        # hong
  region: us-east-1             # chris
  environment:
    STATEMACHINE_ARN:
      Ref: SocratesChrisStepFunctionsStateMachine
    ACTIVITY_ARN: "arn:aws:states:#{AWS::Region}:#{AWS::AccountId}:activity:WaitForUpload"
    #  Fn::GetAtt: [WaitForUploadStepFunctionsActivity, Arn]
    #BUCKET_NAME: ${self:custom.bucket_name}
    BUCKET_NAME: ${self:service}-${self:provider.stage}-${env:USER}
    # The Lambda will need this, but can't get it until after statemachine is created?
    # STATEMACHINE_ARN:
    #   Fn::GetAtt: [SocratesChrisStepFunctionsStateMachine, Arn]
    # Example ARNs for previously created SMs:
    # StateMachine ARN: arn:aws:states:us-east-1:304932368623:stateMachine:CallCenterStepFunctionsStateMachine-UexAbet6E2ow
    # IAM role ARN:     arn:aws:iam::304932368623:role/slssteps-dev-IamRoleStateMachineExecution-1MRICNKT0JZRH
  # SLS creates this by itself:
  # ARN: arn:aws:iam::304932368623:role/socrates2-dev-IamRoleStateMachineExecution-4W2KL6QN2BJI
  # Policy Name: dev-us-east-1-socrates2-statemachine
  # Policy Inline:
  #     {
  #     "Version": "2012-10-17",
  #     "Statement": [
  #         {
  #             "Action": [
  #                 "lambda:InvokeFunction"
  #             ],
  #             "Resource": [
  #                 "arn:aws:lambda:us-east-1:304932368623:function:socrates2-dev-StartJobf",
  #                 "arn:aws:lambda:us-east-1:304932368623:function:socrates2-dev-SplitPdf"
  #             ],
  #             "Effect": "Allow"
  #         }
  #     ]
  # }
  # 
  iamRoleStatements:
    # Allow the lambda to generate a PSURL that can upload a file via put_object
    - Effect: Allow
      Action:
        - s3:DeleteObject
        - s3:GetObject
        - s3:PutObject
        - s3:ListBucket
      Resource: 
        - "arn:aws:s3:::${self:service}-${self:provider.stage}-${env:USER}"     # TODO use the custom or environment var
        - "arn:aws:s3:::${self:service}-${self:provider.stage}-${env:USER}/*"   # TODO use the custom or environment var
    # - Effect: Allow
    #   Action:
    #   - states:GetActivityTask
    #   - states:SendTaskSuccess
    #   - states:SendTaskFailure
    #   - states:SendTaskHeartbeat
    #   Resource: "arn:aws:states:#{AWS::Region}:#{AWS::AccountId}:activity:WaitForUpload"
    #   #  Fn::GetAtt: [WaitForUploadStepFunctionsActivity, Arn]

functions:
  GetUploadUrl:
    description: return S3 presigned URL with JobId and filename to allow upload doc_pdf/jid/name.pdf
    handler: handler.get_upload_url
    events:
    - http: GET /uploadurl
  Uploaded:
    description: on S3 upload event, add some info to DB, start the state machine
    handler: handler.uploaded
    events:
     - s3:
         bucket: ${self:service}-${self:provider.stage}-${env:USER}   # TODO use the custom or environment var
         event: s3:ObjectCreated:*
         rules:
           - prefix: doc_pdf/
           - suffix: .pdf
  SplitPdf:
    description: triggered by statemachine bread doc_pdf/jid/name.pdf into pages page_pdf/jid/0000.pdf
    handler: handler.split_pdf

stepFunctions:
  stateMachines:
    SocratesChris:
      tags:
        owner: chris@v-studios.com
      definition:
        Comment: start at upload then drive the lambdas
        StartAt: Uploaded
        States:
          Uploaded:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-Uploaded"
            End: true
          #   Next: SplitPdf
          # SplitPdf:
          #   Type: Pass
          #   End: true
#           # SplitPdf:
#           #   Type: Task
#           #   Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-SplitPdf"
#           #   #Fn::GetAtt: [SplitPdfLambdaFunction, Arn]
#           #   Next: DeclareVictory
#           # DeclareVictory:
#           #   Type: Pass
#           #   End: true
#   activities:
#     # To reference ActivityName, use Fn::GetAtt [ActivityNameStepFunctionsActivity, Arn]
#     - WaitForSplit

